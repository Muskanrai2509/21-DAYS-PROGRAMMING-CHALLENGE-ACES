. Dictionaries are sometimes
found in other languages as “associative memories” or “associative arrays”, dictionaries are indexed by keys, which can be any immutable type; strings
and numbers can always be keys.a dictionary as a set of key: value pairs, with the requirement that the keys are unique
(within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated
list of key:value pairs within the braces adds initial key:value pairs to the dictionary .You can’t use
lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like
append() and extend().
example:
>>> tel = {'jack': 4098, 'sape': 4139}
>>> tel['guido'] = 4127
>>> tel
{'jack': 4098, 'sape': 4139, 'guido': 4127}
>>> tel['jack']
4098
>>> del tel['sape']
>>> tel['irv'] = 4127
>>> tel
{'jack': 4098, 'guido': 4127, 'irv': 4127}
>>> list(tel)
['jack', 'guido', 'irv']
>>> sorted(tel)
['guido', 'irv', 'jack']
>>> 'guido' in tel
True
>>> 'jack' not in tel
False

SETS:
Python also includes a data type for sets. A set is an unordered collection with no duplicate elements. Basic
uses include membership testing and eliminating duplicate entries. Set objects also support mathematical
operations like union, intersection, difference, and symmetric difference.
Curly braces or the set() function can be used to create sets.
example:
>>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
>>> print(basket) # show that duplicates have been removed
{'orange', 'banana', 'pear', 'apple'}
>>> 'orange' in basket # fast membership testing
True
>>> 'crabgrass' in basket
False
>>> # Demonstrate set operations on unique letters from two words
...
>>> a = set('abracadabra')
>>> b = set('alacazam')
>>> a # unique letters in a
{'a', 'r', 'b', 'c', 'd'}
>>> a - b # letters in a but not in b
{'r', 'd', 'b'}
>>> a | b # letters in a or b or both
{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
>>> a & b # letters in both a and b
{'a', 'c'}
>>> a ^ b # letters in a or b but not both
{'r', 'd', 'b', 'm', 'z', 'l'}


More on Conditions:
The conditions used in while and if statements can contain any operators, not just comparisons.
The comparison operators in and not in check whether a value occurs (does not occur) in a sequence. The
operators is and is not compare whether two objects are really the same object; this only matters for
mutable objects like lists. All comparison operators have the same priority, which is lower than that of all
numerical operators.
The Boolean operators and and or are so-called short-circuit operators: their arguments are evaluated from
left to right, and evaluation stops as soon as the outcome is determined. For example, if A and C are true
but B is false, A and B and C does not evaluate the expression C. When used as a general value and not as
a Boolean, the return value of a short-circuit operator is the last evaluated argument.
>>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
>>> non_null = string1 or string2 or string3
>>> non_null
'Trondheim'