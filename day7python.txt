Packages:
Packages are a way of structuring Python’s module namespace by using “dotted module names”. For example,
the module name A.B designates a submodule named B in a package named A. Just like the use of modules
saves the authors of different modules from having to worry about each other’s global variable names, the
use of dotted module names saves the authors of multi-module packages like NumPy or the Python Imaging
Library from having to worry about each other’s module names.

The __init__.py files are required to make Python treat the directories as containing packages; this is done
to prevent directories with a common name, such as string, from unintentionally hiding valid modules that
occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it
can also execute initialization code for the package or set the __all__ variable, described later.


Users of the package can import individual modules from the package, for example:
import sound.effects.echo

This loads the submodule sound.effects.echo. It must be referenced with its full name.
sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)
An alternative way of importing the submodule is:
from sound.effects import echo

This also loads the submodule echo, and makes it available without its package prefix, so it can be used as
follows:
echo.echofilter(input, output, delay=0.7, atten=4)

Yet another variation is to import the desired function or variable directly:
from sound.effects.echo import echofilter

Again, this loads the submodule echo, but this makes its function echofilter() directly available:
echofilter(input, output, delay=0.7, atten=4)

Note that when using from package import item, the item can be either a submodule (or subpackage)
of the package, or some other name defined in the package, like a function, class or variable. The import
statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts
to load it. If it fails to find it, an ImportError exception is raised.

sound/ Top-level package
__init__.py Initialize the sound package
formats/ Subpackage for file format conversions
__init__.py
wavread.py
wavwrite.py
aiffread.py
aiffwrite.py
auread.py
auwrite.py
...
effects/ Subpackage for sound effects
__init__.py
echo.py
surround.py
reverse.py
...
filters/ Subpackage for filters
__init__.py
equalizer.py
vocoder.py
karaoke.py

Importing * From a Package:
import sound.effects.echo
import sound.effects.surround
from sound.effects import *

Intra-pakage References:
from . import echo
from .. import formats
from ..filters import equalizer

Packages in Multiple Directories:
Packages support one more special attribute, __path__. This is initialized to be a list containing the name
of the directory holding the package’s __init__.py before the code in that file is executed. This variable
can be modified; doing so affects future searches for modules and subpackages contained in the package.
