Strings in python:
Assigning a string to a variable is done with the variable name followed by an equal sign and the string:
a = "Hello"
print(a)

Slicing:
You can return a range of characters by using the slice syntax.Specify the start index and the end index, separated by a colon, to return a part of the string.
b = "Hello, World!"
print(b[2:5])
Negative Indexing:
b = "Hello, World!"
print(b[-5:-2])

Methods in string like length, split, upper case, lower case etc;
s = "Strings are awesome!"
# Length should be 20
print("Length of s = %d" % len(s))

# First occurrence of "a" should be at index 8
print("The first occurrence of the letter a = %d" % s.index("a"))

# Number of a's should be 2
print("a occurs %d times" % s.count("a"))

# Slicing the string into bits
print("The first five characters are '%s'" % s[:5]) # Start to 5
print("The next five characters are '%s'" % s[5:10]) # 5 to 10
print("The thirteenth character is '%s'" % s[12]) # Just number 12
print("The characters with odd index are '%s'" %s[1::2]) #(0-based indexing)
print("The last five characters are '%s'" % s[-5:]) # 5th-from-last to end

# Convert everything to uppercase
print("String in uppercase: %s" % s.upper())

# Convert everything to lowercase
print("String in lowercase: %s" % s.lower())

# Check how a string starts
if s.startswith("Str"):
    print("String starts with 'Str'. Good!")

# Check how a string ends
if s.endswith("ome!"):
    print("String ends with 'ome!'. Good!")

# Split the string into three separate strings,
# each containing only a word
print("Split the words of the string: %s" % s.split(" "))

Python booleans:
Booleans represent one of two values: True or False.
Eg:
print(bool("Hello"))
print(bool(15))
Eg:
x = "Hello"
y = 15
print(bool(x))
print(bool(y))
Functions can Return a Boolean
You can create functions that returns a Boolean Value:
Example
Print the answer of a function:
def myFunction() :
  return True
print(myFunction())

Inheritance in python:
Inheritance enables us to define a class that takes all the functionality from a parent class and allows us to add more. It refers to defining a new class with little or no modification to an existing class. The new class is called derived (or child) class and the one from which it inherits is called the base (or parent) class. 
Eg:class Polygon:
    def __init__(self, no_of_sides):
        self.n = no_of_sides
        self.sides = [0 for i in range(no_of_sides)]

    def inputSides(self):
        self.sides = [float(input("Enter side "+str(i+1)+" : ")) for i in range(self.n)]

    def dispSides(self):
        for i in range(self.n):
            print("Side",i+1,"is",self.sides[i])
Method overriding :
It allows a subclass or child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature and same return type(or sub-type) as a method in its super-class
class Parent(): 
   # Constructor 

    def __init__(self): 

        self.value = "Inside Parent"
  # Parent's show method 

    def show(self): 

        print(self.value) 

          
# Defining child class 

class Child(Parent): 

      

    # Constructor 

    def __init__(self): 

        self.value = "Inside Child"

          

    # Child's show method 

    def show(self): 

        print(self.value) 

          

          
# Driver's code 

obj1 = Parent() 
obj2 = Child()
obj1.show() 
obj2.show()

1.Multiple Inheritance: When a class is derived from more than one base class it is called multiple Inheritance.
class Parent1(): 

          

    # Parent's show method 

    def show(self): 

        print("Inside Parent1") 

          
# Defining Parent class 2 

class Parent2(): 

          

    # Parent's show method 

    def display(self): 

        print("Inside Parent2") 

          

          
# Defining child class 

class Child(Parent1, Parent2): 

          

    # Child's show method 

    def show(self): 

        print("Inside Child") 

     

        
# Driver's code 

obj = Child() 

  
obj.show() 
obj.display()
2.Multilevel Inheritance: When we have a child and grandchild relationship
class Parent():  

        

    # Parent's show method 

    def display(self): 

        print("Inside Parent") 

    

    
# Inherited or Sub class (Note Parent in bracket)  

class Child(Parent):  

        

    # Child's show method 

    def show(self): 

        print("Inside Child") 

    
# Inherited or Sub class (Note Child in bracket)  

class GrandChild(Child):  

          

    # Child's show method 

    def show(self): 

        print("Inside GrandChild")          

    
# Driver code  

g = GrandChild()    
g.show() 
g.display()
